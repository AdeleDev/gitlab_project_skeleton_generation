---
apiVersion: v1
items:
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: {{IMAGE_NAME}}
      namespace: {{NAMESPACE}}
    spec:
      replicas: {{REPLICA}}
      selector:
        matchLabels:
          workload.user.cattle.io/workloadselector: deployment-{{NAMESPACE}}-{{IMAGE_NAME}}
      strategy:
        rollingUpdate:
          #for production it will be updated to maxSurge 1, maxUnavailable 0
          maxSurge: 0
          maxUnavailable: 1
        type: RollingUpdate
      template:
        metadata:
          annotations:
            field.cattle.io/ports: '[[{"containerPort":8080,"dnsName":"{{IMAGE_NAME}}-nodeport","kind":"NodePort","name":"http","protocol":"TCP"}]]'
          labels:
            workload.user.cattle.io/workloadselector: deployment-{{NAMESPACE}}-{{IMAGE_NAME}}
            app: {{IMAGE_NAME}}
        spec:
          affinity: # split to availability zones
            podAntiAffinity:
              preferredDuringSchedulingIgnoredDuringExecution:
                - weight: 1
                  podAffinityTerm:
                    labelSelector:
                      matchLabels:
                        app: deployment-{{NAMESPACE}}-{{IMAGE_NAME}}
                    topologyKey: "topology.kubernetes.io/zone"
          containers:
            - image: {{IMAGE_PATH}}
              imagePullPolicy: Always
              name: {{IMAGE_NAME}}
              resources:
                limits:
                  cpu: {{L_CPU}}
                  memory: {{L_MEM}}
                requests:
                  cpu: {{R_CPU}}
                  memory: {{R_MEM}}
              ports:
                - containerPort: 8080
                  name: http
                  protocol: TCP
              readinessProbe:
                failureThreshold: 3
                httpGet:
                  path: /actuator/health
                  port: 9090
                  scheme: HTTP
                initialDelaySeconds: 10
                periodSeconds: 5
                successThreshold: 2
                timeoutSeconds: 2
              securityContext:
                allowPrivilegeEscalation: false
                capabilities: { }
                privileged: false
                readOnlyRootFilesystem: true
                runAsNonRoot: true
              stdin: true
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              tty: true
              volumeMounts:
                - name: config-volume
                  mountPath: /etc/config
          volumes:
            - name: config-volume
              configMap:
                # Provide the name of the ConfigMap containing the files you want
                # to add to the container
                name: {{IMAGE_NAME}}
          dnsPolicy: ClusterFirst
          imagePullSecrets:
            - name: {{DOCKER_SECRET}}
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: { }
          terminationGracePeriodSeconds: 30
kind: List
