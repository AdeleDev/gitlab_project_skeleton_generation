plugins {
    id 'org.springframework.boot' version "$springBootVersion"
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
    id "org.sonarqube" version "2.8"
    id "org.openapi.generator" version "$openapiGenVersion"
    id 'pl.allegro.tech.build.axion-release' version '1.9.3'
    id "com.github.lkishalmi.gatling" version "3.3.0"
    id 'jacoco'
}

scmVersion {
    tag {
        prefix = project.name
        initialVersion = { config, position -> return '1.0.0' }
    }
    nextVersion {
        suffix = 'alpha'
    }
    ignoreUncommittedChanges = false
    useHighestVersion = true
    versionIncrementer 'incrementMinor'
}

group = 'de.telekom.ngfs.servicename'
version = scmVersion.version
sourceCompatibility = JavaVersion.VERSION_13

tasks.withType(JavaCompile) {
    options.encoding = "$sourceEncoding"
    options.compilerArgs.add("--enable-preview")
}

repositories {
    mavenCentral()
}

//redefine parameters for integration tests
bootRun {
    jvmArgs(['--enable-preview'])
}

sourceSets {
    main {
        java {
            srcDirs "$buildDir/openapi-generated-src", "$buildDir/wsdl-generated-src"
        }
    }
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file("src/integration-test/resources")
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestImplementation.extendsFrom implementation
}

dependencies {
    implementation "io.swagger:swagger-annotations:$swaggerVersion"
    implementation "org.apache.cxf:cxf-spring-boot-starter-jaxrs:$cxfSpringBootVersion"
    implementation "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:$jacksonVersion"
    implementation("javax.xml.ws:jaxws-api:$jaxwsVersion") { transitive = false }
    implementation("net.logstash.logback:logstash-logback-encoder:$logstashEncoderVersion") { transitive = false }
    implementation "org.apache.cxf:cxf-rt-features-logging:$cxfLoggingVersion"

    implementation "org.springframework.cloud:spring-cloud-starter-kubernetes-config:$springCloudStarterKubernetesConfig"
    implementation "org.springframework.boot:spring-boot-starter-actuator:$springBootVersion"
    implementation "io.micrometer:micrometer-registry-prometheus:$micrometerVersion"

    implementation "org.mapstruct:mapstruct:$mapstructVersion"
    annotationProcessor "org.mapstruct:mapstruct-processor:$mapstructVersion"

    implementation "org.springframework.boot:spring-boot-starter-data-jpa:$springBootVersion"
    implementation "org.postgresql:postgresql:$postgresDriverVersion"
    implementation "org.springframework.boot:spring-boot-starter-web:$springBootVersion"
    implementation "org.hibernate.validator:hibernate-validator:${hibernateVersion}"

    implementation "org.apache.commons:commons-lang3:3.12.0"

    testImplementation "org.junit.jupiter:junit-jupiter:$junitVersion"
    testImplementation "org.mockito:mockito-core:$mockitoInlineVersion"
    testImplementation "org.mockito:mockito-junit-jupiter:$mockitoInlineVersion"
    testImplementation "org.springframework.boot:spring-boot-starter-test:$springBootVersion"

    integrationTestImplementation "com.github.tomakehurst:wiremock-jre8:$wiremockVersion"
    integrationTestImplementation "io.rest-assured:rest-assured:$restAssuredVersion"
    integrationTestImplementation "io.rest-assured:json-path:$restAssuredVersion"
    integrationTestImplementation "io.rest-assured:xml-path:$restAssuredVersion"
    integrationTestImplementation "com.jcraft:jsch:$jcraftVersion"

    developmentOnly "org.springframework.boot:spring-boot-devtools:$springBootVersion"
}

test {
    finalizedBy jacocoTestReport
    useJUnitPlatform()
    jvmArgs(['--enable-preview'])
}

bootJar {
    manifest {
        attributes(
                'Created-By': "${System.properties['java.version']} (${System.properties['java.vendor']})",
                'Build-Tool': "Gradle $gradle.gradleVersion",
                'Built-By': System.properties['user.name'],
                'Implementation-Title': rootProject.name,
                'Implementation-Vendor': 'Deutsche Telekom IT GmbH',
                'Implementation-Version': "$project.version"
        )
    }
}

task buildCxfServer(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
    generatorName = "jaxrs-spec"
    inputSpec = "$rootDir/src/main/resources/api/service_v1.0.yaml"
    outputDir = "$buildDir/openapi-generated-src"
    configOptions = [
            dateLibrary   : "java8",
            sourceFolder  : "",
            returnResponse: "true",
            interfaceOnly : "true"
    ]
    systemProperties = [
            apis  : "",
            models: ""
    ]
    apiPackage = "de.telekom.ngfs.servicename.api"
    modelPackage = "de.telekom.ngfs.servicename.model"
    modelNameSuffix = "Dto"
    generateApiTests = false
    generateModelTests = false
}

task buildCxfClient(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
    generatorName = "jaxrs-cxf-client"
    inputSpec = "$rootDir/src/main/resources/api/service_v1.0.yaml"
    outputDir = "$buildDir/openapi-generated-src"
    configOptions = [
            dateLibrary : "java8",
            sourceFolder: ""
    ]
    systemProperties = [
            apis  : "false",
            models: ""
    ]
    apiPackage = "de.telekom.ngfs.servicename.api"
    modelPackage = "de.telekom.ngfs.servicename.model"
    modelNameSuffix = "Dto"
    generateApiTests = false
    generateModelTests = false
}

task generateArtifacts(dependsOn: ['buildCxfServer', 'buildCxfClient'])

compileJava.dependsOn generateArtifacts

task integrationTest(type: Test) {
    description = 'Runs integration tests.'
    group = 'verification'

    useJUnitPlatform()
    jvmArgs(['--enable-preview'])

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath

    testLogging.events = ["PASSED", "SKIPPED", "FAILED", "STANDARD_OUT", "STANDARD_ERROR"]
    testLogging.exceptionFormat = 'full'

    outputs.upToDateWhen { false }
}

release {
    doFirst {
        setGitSaCredentials()
    }
}

markNextVersion {
    doFirst {
        setGitSaCredentials()
    }
}

def setGitSaCredentials() {
    if (project.hasProperty('gitsa_user')) {
        scmVersion.repository.customUsername = project.gitsa_user
    }
    if (project.hasProperty('gitsa_pwd')) {
        scmVersion.repository.customPassword = project.gitsa_pwd
    }
}

jacocoTestReport {
    getExecutionData().setFrom(fileTree(buildDir).include("/jacoco/*.exec"))

    afterEvaluate {
        classDirectories.setFrom(classDirectories.files.collect {
            fileTree(dir: 'build/classes/java/', exclude: [
                    'scala/**',
                    'integrationTest/**',
                    'test/**'
            ])
        })
    }
    reports {
        html.enabled true
    }
}

task jacocoTestReportIntegration(type: JacocoReport) {
    getExecutionData().setFrom(fileTree(buildDir).include("/jacoco/integration/*.exec"))
    afterEvaluate {
        classDirectories.setFrom(files {
            fileTree(dir: 'build/classes/', exclude: [
                    'scala/**',
                    'java/integrationTest/**',
                    'java/test/**'
            ])
        })
    }
    reports {
        html.enabled true
    }
}